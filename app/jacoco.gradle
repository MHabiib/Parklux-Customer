apply plugin: 'jacoco'

ext.excludeFileFilter = [
        'android/**/*.*',
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        '**/*Module.*', // modules for Dagger.
        '**/*Module$Companion.*', // modules for Dagger+Kotlin.
        '**/*Dagger*.*', // Dagger auto-generated code.
        '**/*MembersInjector*.*', // Dagger auto-generated code.
        '**/*_Provide*Factory*.*',
        '**/*_Factory.*', // Dagger auto-generated code
]

jacoco {
    toolVersion = "0.8.3"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports."

    reports {
        html.enabled true
        xml.enabled true
    }


    def includeFileFilter = [
            "**/future/pms/**/presenter/**"
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", includes: includeFileFilter, excludes: excludeFileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", includes: includeFileFilter, excludes: excludeFileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree, kotlinDebugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

check.dependsOn jacocoTestReport

android.testOptions {
    unitTests.all {
        jacoco {
            includeNoLocationClasses = true
        }
    }
    unitTests.returnDefaultValues = true
}
